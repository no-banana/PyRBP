RBP_package.Features
==================================


.. py:method:: RBP_package.Features.generateBPFeatures(sequences, pseudoKNC=False, ktuple=3, zCurve=False, gcContent=False, AUSkew=False, GCAURatio=False, PGKM=False, gapValue=1, kValue=2, mValue=2, NPCP=False)

    This function is used to generate various types of features based on the sequences (physicochemical features, sequence properties, base composition, etc.).

    :Parameters:
                .. class:: sequences:list or array, necessary parameters

                        List or array of sequences used to generate features.

                .. class:: pseudoKNC:bool, default=False

                        Whether to use pseudoKNC algorithm to generate features, if ``True``, the value of the parameter ktuple will be used for subsequent feature generation.

                .. class:: ktuple:int, default=3

                        Used to determine the number of bases for each tuple in `pseudoKNC` in the values of ``[3, 4, 5]``.

                .. class:: zCurve:bool, default=False

                        Whether to use zCurve algorithm to generate features.

                .. class:: gcContent:bool, default=False

                        Whether to use gcContent algorithm to generate features.

                .. class:: AUSkew:bool, default=False

                        Whether to use AUSkew algorithm to generate features.

                .. class:: GCAURatio:bool, default=False

                        Whether to use GCAURatio algorithm to generate features.

                .. class:: PGKM:bool, default=False

                        Whether to use PGKM algorithm to generate features. if ``True``, the value of the parameter gapValue, kValue and mValue will be used for subsequent feature generation.

                .. class:: gapValue:int, default=1

                        Used to determine the number of gaps between each two tuples. Its value is limited to ``[1, 2, 3, 4, 5]``.

                .. class:: kValue:int, default=2

                        Used to determine the number of bases for the first tuple in `PGKM`, the value is limited to ``[1, 2]``.

                .. class:: mValue:int, default=2

                        Used to determine the number of bases for the second tuple in `PGKM`, the value is limited to ``[1, 2]``.

                .. class:: NPCP:bool, default=False

                        Whether to use NPCP algorithm to generate features.

    .. note:: The values of gapValue, kValue and mValue greatly affect the number of feature dimensions generated by the PGKM algorithm, the larger the values of these three parameters, the longer the running time of PGKM. Please set the parameter values according to your needs.

    :Attributes:
                .. class:: features:list of feature according to each sequence

                        Used to store the final generated features for each sequence. When the function returns, it has been converted to an array.

                .. class:: feature:list of feature values for one sequence

                        Used Used to store the various features of the sequence being processed.


.. py:function:: RBP_package.Features.generateDynamicLMFeatures(sequences, kmer=3, model='')

    This function is used to generate the dynamic semantic information matrix of the sequence, in which we provide the fine-tuned ``BERT models (RBPBERT)`` for the RBP classification problem. The models can be downloaded from `figshare link <https://figshare.com/articles/software/LM_for_RBP_package/21383187>`_. When extraction is complete, the dimension of the feature matrix obtained is (``number of sequences``, ``number of tokens per sequence``, ``768``), where ``768`` indicates 768 hidden units of 12 attention heads in the last transformer layer.

    :Parameters:
                .. class:: sequences:list or array, necessary parameters

                        List or array of sequences used to generate features.

                .. class:: kmer:int, default=3

                        kmer specifies the window size to be used when tokenizing sequences. There are four window sizes to choose from ``[3, 4, 5, 6]``.

                .. class:: model:str, default=''

                        The path where the downloaded ``RBPBERT`` model is stored, it should be noted that when passing parameters, only the `absolute path` to the folder where the model is located should be passed in, as in the example:
                        ::

                            /home/wangyansong/RBP_package/src/RBP_apckage_no_banana/dynamicRNALM/circleRNA/pytorch_model_3mer


.. py:function:: RBP_package.Features.generateStaticLMFeatures(sequences, kmer=3, model='')

    There are four static semantic models available in the RBP_package: ``fasttext``, ``GloVe``, ``word2vec`` and ``doc2vec``. These models can be downloaded from `figshare link <https://figshare.com/articles/software/LM_for_RBP_package/21383187>`_.

    :Parameters:
                .. class:: sequences:list or array, necessary parameters

                        List or array of sequences used to generate features.

                .. class:: kmer:int, default=3

                        kmer specifies the window size to be used when tokenizing sequences. There are four window sizes to choose from ``[3, 4, 5, 6]``.

                .. class:: model:str, default=''

                        The path where the downloaded ``static semantic model`` is stored, it should be noted that when passing parameters, you need to be careful that the model path passed in is consistent with ``kmer``.

    :Attributes:
                .. class:: LM_type:str, ['word2vec', 'fasttext', 'doc2vec', 'GloVe']

                        Separated from the incoming model file name, used to distinguish different models when extracting embedding.

    .. note:: Since both of the above modules need to separate some required information from the model names to perform matching checks, please do not make any changes to the downloaded model file names when using dynamic or static language models for semantic feature extraction, otherwise it may cause the module not to work properly.




RBP_package.Features.structureFeature
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
